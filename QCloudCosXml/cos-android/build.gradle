apply plugin: 'com.android.library'
apply from: '../version.gradle'
apply from: 'jacoco.gradle'
apply plugin: 'com.kezong.fat-aar'

def compileQuic() {
    return getGradle().getStartParameter().getTaskRequests()
            .toString().contains("Debug") && "QCloudCosXml".equalsIgnoreCase(rootProject.name)
}

//是否包含灯塔
def includeBeacon = true

repositories {
    flatDir {
        dirs 'libs'
    }
}

android {

    compileSdkVersion 28

    defaultConfig {
//        minSdkVersion 15
        // 跑单测用19 因为依赖cls sdk
        minSdkVersion 19
        targetSdkVersion 28

        versionCode cosSdkVersionCode
        versionName cosSdkVersionName

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        consumerProguardFiles 'proguard-rules.pro'

        multiDexEnabled true
    }

    buildTypes {

        debug {
            testCoverageEnabled = true
//            it.buildConfigField "int", "VERSION_CODE", "${defaultConfig.versionCode}"
//            it.buildConfigField "String","VERSION_NAME","\"${defaultConfig.versionName}\""
            it.buildConfigField 'String', 'OWNER_UIN', quotWrapper(System.getenv("OWNER_UIN"))
            it.buildConfigField 'String', 'COS_APPID', quotWrapper(System.getenv("COS_APPID"))
            it.buildConfigField 'String', 'COS_SECRET_ID', quotWrapper(System.getenv("COS_SECRET_ID"))
            it.buildConfigField 'String', 'COS_SECRET_KEY', quotWrapper(System.getenv("COS_SECRET_KEY"))
            it.buildConfigField 'String', 'CI_SECRET_ID', quotWrapper(System.getenv("CI_SECRET_ID"))
            it.buildConfigField 'String', 'CI_SECRET_KEY', quotWrapper(System.getenv("CI_SECRET_KEY"))
            it.buildConfigField 'String', 'PERSIST_BUCKET_REGION', quotWrapper(System.getenv("PERSIST_BUCKET_REGION"))
            it.buildConfigField 'String', 'PERSIST_BUCKET', quotWrapper(System.getenv("PERSIST_BUCKET"))
            it.buildConfigField 'String', 'PERSIST_BUCKET_CDN_SIGN', quotWrapper(System.getenv("PERSIST_BUCKET_CDN_SIGN"))
            it.buildConfigField 'String', 'TEMP_BUCKET_REGION', quotWrapper(System.getenv("TEMP_BUCKET_REGION"))
            it.buildConfigField 'String', 'TEMP_BUCKET', quotWrapper(System.getenv("TEMP_BUCKET"))
            it.buildConfigField 'Boolean', 'WEAK_NETWORK_TEST', safeEnvBoolean(System.getenv("WEAK_NETWORK_TEST"))
            it.buildConfigField 'Boolean', 'QUIC_TEST', safeEnvBoolean(System.getenv("QUIC_TEST"))
            it.buildConfigField 'String', 'QUIC_BUCKET_REGION', quotWrapper(System.getenv("QUIC_BUCKET_REGION"))
            it.buildConfigField 'String', 'QUIC_BUCKET', quotWrapper(System.getenv("QUIC_BUCKET"))
            it.buildConfigField 'String', 'QUIC_TEST_IP', quotWrapper(System.getenv("QUIC_TEST_IP"))
            it.buildConfigField 'String', 'PERSIST_BUCKET_REPLICATION', quotWrapper(System.getenv("PERSIST_BUCKET_REPLICATION"))
            it.buildConfigField 'String', 'PERSIST_BUCKET_REPLICATION_REGION', quotWrapper(System.getenv("PERSIST_BUCKET_REPLICATION_REGION"))
            it.buildConfigField 'String', 'UT_DNS_ID', quotWrapper(System.getenv("UT_DNS_ID"))
            it.buildConfigField 'String', 'UT_DNS_KEY', quotWrapper(System.getenv("UT_DNS_KEY"))

            it.buildConfigField 'String', 'CLS_SECRET_ID', quotWrapper(System.getenv("CLS_SECRET_ID"))
            it.buildConfigField 'String', 'CLS_SECRET_KEY', quotWrapper(System.getenv("CLS_SECRET_KEY"))

            it.buildConfigField 'String', 'CALLBACK_SECRET_ID', quotWrapper(System.getenv("CALLBACK_SECRET_ID"))
            it.buildConfigField 'String', 'CALLBACK_SECRET_KEY', quotWrapper(System.getenv("CALLBACK_SECRET_KEY"))
        }

        release {
//            it.buildConfigField "int", "VERSION_CODE", "${defaultConfig.versionCode}"
//            it.buildConfigField "String","VERSION_NAME","\"${defaultConfig.versionName}\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    flavorDimensions "production"

    productFlavors {
        normal { dimension "production" }
        slim { dimension "production" }
    }
    lintOptions {
        abortOnError false
    }

    // 切换发 normal 或者 slim 包，需要同步修改 pom.artifactId 信息
//    defaultPublishConfig "normalRelease"
      defaultPublishConfig  "slimRelease"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    buildToolsVersion = '28.0.2'

    // 单测失败也继续统计覆盖率
    project.gradle.taskGraph.whenReady {
        android.productFlavors.all { flavor ->
            // Capitalize (as Gralde is case-sensitive).
            def flavorName = flavor.name.substring(0, 1).toUpperCase() + flavor.name.substring(1)

            // At last, configure.
            "connected${flavorName}DebugAndroidTest" {
                ignoreFailures = true
//                defaultConfig.multiDexEnabled = true
            }
        }
    }
}

fataar {
    /**
     * If transitive is true, local jar module and remote library's dependencies will be embed.
     * If transitive is false, just embed first level dependency
     * Local aar project does not support transitive, always embed first level
     * Default value is false
     * @since 1.3.0
     */
    transitive = true
}

dependencies {
    compileOnly 'androidx.appcompat:appcompat:1.6.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation "androidx.test:rules:1.5.0"
    androidTestImplementation 'androidx.core:core:1.6.0'
    androidTestImplementation "androidx.test:runner:1.5.2"

    androidTestCompileOnly project(path: ':cos-android')
    androidTestCompileOnly project(path: ':cos-android-base')
    // kms 加密
    androidTestImplementation 'com.tencentcloudapi:tencentcloud-sdk-java-kms:3.1.213'
    androidTestImplementation 'xerces:xercesImpl:2.12.0'

    androidTestImplementation(project(path: ':quic')) {
        exclude group: 'com.qcloud.cos', module: 'qcloud-foundation'
    }
    //tencent http dns
    androidTestImplementation "io.github.dnspod:httpdns-sdk:4.3.0"
//    androidTestImplementation 'android.arch.persistence.room:rxjava2:2.1.1'
    androidTestImplementation "androidx.room:room-rxjava2:2.5.1"

    androidTestImplementation 'com.tencentcloudapi.cls:tencentcloud-cls-sdk-android:1.0.5'
    androidTestImplementation 'com.google.guava:guava:27.0.1-android'

//    if (compileQuic() && false) {
//        api project(path: ':quic')
//    }

//    compileOnly project(path: ':quic')
    compileOnly project(':xmlAnnoation')
    annotationProcessor project(':xmlCompiler')

    api project(':foundation')
    api project(':cos-android-base')
    api project(':qcloud-track')
    if(includeBeacon){
        embed(name: 'beacon-android-release-4.2.86.7-hf1-official', ext: 'aar')
        embed(name: 'qimei-1.2.18.3', ext: 'aar')
        embed(name: 'qimei-core-1.2.18.3-normal', ext: 'aar')
        embed(name: 'qmsp-oaid2-1.0.4', ext: 'aar')
    }

    // 非lite版本引入gson库，万象部分功能需要
    if (!android.defaultPublishConfig.contains("slim")) {
        implementation 'com.google.code.gson:gson:2.11.0'
    }

    // kms 加密
    compileOnly 'com.tencentcloudapi:tencentcloud-sdk-java-kms:3.1.213'
    compileOnly 'xerces:xercesImpl:2.12.0'
}


// 发布到 bintray

if (android.defaultPublishConfig.contains("slim")){
    if(includeBeacon){
        project.extensions.add('artifactId', 'cos-android-lite')
        project.extensions.add('packageName', 'QCloudCosXmlLite')
        project.extensions.add('packageType', 'aar')
        project.extensions.add('artifactProduct', 'slim')
        project.extensions.add('artifactDesc', 'the tencent cloud cosxml android sdk')
        project.extensions.add('archiveName', 'cos-android-slim-release.aar')
        project.extensions.add('archiveFilePath', 'outputs/aar/cos-android-lite-slim-release.aar')
    } else {
        project.extensions.add('artifactId', 'cos-android-lite-nobeacon')
        project.extensions.add('packageName', 'QCloudCosXmlLite')
        project.extensions.add('packageType', 'aar')
        project.extensions.add('artifactProduct', 'slim')
        project.extensions.add('artifactDesc', 'the tencent cloud cosxml android sdk - no beacon')
        project.extensions.add('archiveName', 'cos-android-nobeacon-slim-release.aar')
        project.extensions.add('archiveFilePath', 'outputs/aar/cos-android-lite-nobeacon-slim-release.aar')
    }
}else {
    if(includeBeacon) {
        project.extensions.add('artifactId', 'cos-android')
        project.extensions.add('packageName', 'QCloudCosXml')
        project.extensions.add('packageType', 'aar')
        project.extensions.add('artifactProduct', 'normal')
        project.extensions.add('artifactDesc', 'the tencent cloud cosxml android sdk')
        project.extensions.add('archiveFilePath', 'outputs/aar/cos-android-normal-release.aar')
    } else {
        project.extensions.add('artifactId', 'cos-android-nobeacon')
        project.extensions.add('packageName', 'QCloudCosXml')
        project.extensions.add('packageType', 'aar')
        project.extensions.add('artifactProduct', 'normal')
        project.extensions.add('artifactDesc', 'the tencent cloud cosxml android sdk - -no beacon')
        project.extensions.add('archiveFilePath', 'outputs/aar/cos-android-nobeacon-normal-release.aar')
    }
}
apply from: '../../publishMavenCentral.gradle'

//发布本地repo
apply plugin: 'maven'
uploadArchives {
    repositories.mavenDeployer {
        pom.project {
            groupId 'com.qcloud.cos'
            artifactId 'cos-android-nobeacon'
            version cosSdkVersionName
            packaging 'aar'
        }
        repository(url: uri("${rootProject.projectDir}/repo"))
    }
}

// 发布到内部仓库
// 已经不再需要发布到内部仓库了

//apply plugin: 'maven'
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: 'https://mirrors.tencent.com/repository/maven/cos_terminal/com/tencent/qcloud'){
//                authentication(userName: 'rickenwang', password: 'xxxxxx')
//                pom.groupId = 'com.tencent.qcloud'
//                pom.version = "${version_name}"
//                pom.artifactId = 'cosxml-lite'
//            }
//        }
//    }
//}

static String quotWrapper(key) {
    if (key == null) {
        return "\"\""
    }
    return "\"".concat(key).concat("\"")
}

static String safeEnvBoolean(b) {

    if (b == null) {
        return "false"
    }

    return b
}


task(requestPermission) {

    def adb = android.getAdbExecutable().toString()
    def testApplicationId = "com.tencent.cos.xml.test"
    println "Granting permissions"
    "${adb} shell pm grant ${testApplicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
    "${adb} shell pm grant ${testApplicationId} android.permission.READ_EXTERNAL_STORAGE".execute()



    // 禁止 UP-TO-DATE
    // outputs.upToDateWhen { false }
}

preBuild.dependsOn "requestPermission"

task(printEnvs) {

    def packageType = project.extensions.findByName('packageType')
    packageType = packageType == null ? "jar" : packageType
    if (packageType.equals("aar")) {
        println('Yes : aar')
    }

    println('System envs region are :')
    println(quotWrapper(System.getenv("REGION")))
}


android.libraryVariants.all { variant ->
    variant.outputs.all {
        System.out.println('variant is ' + variant.name)
        // outputFileName = "${project.extensions.artifactId}-release.aar"
    }
}