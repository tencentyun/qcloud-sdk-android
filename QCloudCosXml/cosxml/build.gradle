apply plugin: 'com.android.library'
apply from: '../version.gradle'

android {

    compileSdkVersion 28

    defaultConfig {

        minSdkVersion 15
        targetSdkVersion 28

        versionCode 50504
        versionName "5.5.4"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }

    buildTypes {

        debug {
            testCoverageEnabled = true

            it.buildConfigField 'String', 'COS_APPID', quotWrapper(System.getenv("COS_APPID"))
            it.buildConfigField 'String', 'COS_UIN', quotWrapper(System.getenv("COS_UIN"))
            it.buildConfigField 'String', 'COS_SECRET_ID', quotWrapper(System.getenv("COS_SECRET_ID"))
            it.buildConfigField 'String', 'COS_SECRET_KEY', quotWrapper(System.getenv("COS_SECRET_KEY"))
            it.buildConfigField 'String', 'BUCKET_PERSIST', quotWrapper(System.getenv("BUCKET_PERSIST"))
            it.buildConfigField 'String', 'BUCKET_TEMP', quotWrapper(System.getenv("BUCKET_TEMP"))
            it.buildConfigField 'String', 'REGION', quotWrapper(System.getenv("REGION"))

            it.buildConfigField 'String', 'CSP_APPID', quotWrapper(System.getenv("CSP_APPID"))
            it.buildConfigField 'String', 'CSP_UIN', quotWrapper(System.getenv("CSP_UIN"))
            it.buildConfigField 'String', 'CSP_SECRET_ID', quotWrapper(System.getenv("CSP_SECRET_ID"))
            it.buildConfigField 'String', 'CSP_SECRET_KEY', quotWrapper(System.getenv("CSP_SECRET_KEY"))

            it.buildConfigField 'String', 'COS_CI_SECRET_ID', quotWrapper(System.getenv("COS_CI_SECRET_ID"))
            it.buildConfigField 'String', 'COS_CI_SECRET_KEY', quotWrapper(System.getenv("COS_CI_SECRET_KEY"))

            it.buildConfigField 'String', 'COS_SUB_SECRET_ID', quotWrapper(System.getenv("COS_SUB_SECRET_ID"))
            it.buildConfigField 'String', 'COS_SUB_SECRET_KEY', quotWrapper(System.getenv("COS_SUB_SECRET_KEY"))
            it.buildConfigField 'String', 'COS_SUB_BUCKET_PERSIST', quotWrapper(System.getenv("COS_SUB_BUCKET_PERSIST"))
            it.buildConfigField 'String', 'COS_SUB_BUCKET_PERSIST_REGION', quotWrapper(System.getenv("COS_SUB_BUCKET_PERSIST_REGION"))

            it.buildConfigField 'String', 'COS_SUB_BUCKET_QUIC', quotWrapper(System.getenv("COS_SUB_BUCKET_QUIC"))
            it.buildConfigField 'String', 'COS_SUB_BUCKET_QUIC_REGION', quotWrapper(System.getenv("COS_SUB_BUCKET_QUIC_REGION"))

            it.buildConfigField 'String', 'COS_SUB_BUCKET_CDN_SIGN', quotWrapper(System.getenv("COS_SUB_BUCKET_CDN_SIGN"))
            it.buildConfigField 'String', 'COS_QUIC_TEST_IP', quotWrapper(System.getenv("COS_QUIC_TEST_IP"))
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    flavorDimensions "production"

    productFlavors {
        normal { dimension "production" }
        slim { dimension "production" }
    }
    lintOptions {
        abortOnError false
    }

    // 切换发 normal 或者 slim 包，需要同步修改 pom.artifactId 信息
    defaultPublishConfig "normalRelease"
    // defaultPublishConfig "slimRelease"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }
    buildToolsVersion = '28.0.2'

}

dependencies {

    compileOnly 'androidx.appcompat:appcompat:1.0.0'
    testCompileOnly 'junit:junit:4.12'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    api project(path: ':foundation')
    api project(path: ':mtaUtils')
    api project(path: ':logUtils')
    api project(path: ':quic')
}

/*
 * Copyright (c) 2010-2020 Tencent Cloud. All rights reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

// 发布到 bintray

if (android.defaultPublishConfig.contains("slim")){
    project.extensions.add('artifactId', 'cosxml-lite')
    project.extensions.add('packageName', 'QCloudCosXmlLite')
    project.extensions.add('artifactProduct', 'slim')
    project.extensions.add('artifactDesc', 'the tencent cloud cosxml android sdk')
}else {
    project.extensions.add('artifactId', 'cosxml')
    project.extensions.add('packageName', 'QCloudCosXml')
    project.extensions.add('artifactProduct', 'normal')
    project.extensions.add('artifactDesc', 'the tencent cloud cosxml android sdk')
}
apply from: '../../publish.gradle'


// 发布到内部仓库
// 已经不再需要发布到内部仓库了

//apply plugin: 'maven'
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            repository(url: 'https://mirrors.tencent.com/repository/maven/cos_terminal/com/tencent/qcloud'){
//                authentication(userName: 'rickenwang', password: 'xxxxxx')
//                pom.groupId = 'com.tencent.qcloud'
//                pom.version = "${version_name}"
//                pom.artifactId = 'cosxml-lite'
//            }
//        }
//    }
//}

static String quotWrapper(key) {
    if (key == null) {
        return "\"\""
    }
    return "\"".concat(key).concat("\"")
}

task(printEnvs) {

    def packageType = project.extensions.findByName('packageType')
    packageType = packageType == null ? "jar" : packageType
    if (packageType.equals("aar")) {
        println('Yes : aar')
    }

    println('System envs region are :')
    println(quotWrapper(System.getenv("REGION")))
}

